{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","tests/3d/modules/domain.js","script.js","tests/3d/modules/filter.js","tests/3d/modules/format.js","tests/3d/modules/id.js","tests/3d/modules/range.js","tests/3d/modules/sort.js","tests/3d/script.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","range","overflowX","data","index","overflowFactor","xWertebereich","min","accessor","max","applyOverflow","data_type","overflowY","values","v_bundle","yWertebereich","minMultipleSets","maxMultipleSets","./range",2,"row","ret","push",3,"id","data_types","config","j","parseFloat","d3","time","format","date_format","parse","ids","type","get","./id","./sort",4,"url","invert","rowId","raw","attr",5,"activated","lmin","lmax","factor","Date","getTime",6,"sort","b",7,"loadFiles","mkcb","err","resp","alert","console","log","datasetsMeta","loaded","loadVisualization","csv","animate","requestAnimationFrame","controls","update","TWEEN","init","scene","THREE","Scene","w","window","innerWidth","h","innerHeight","camera","CombinedCamera","setZoom","toPerspective","position","x","y","z","material","MeshBasicMaterial","color","wireframe","renderer","WebGLRenderer","alpha","antialias","setSize","OrbitControls","domElement","damping","addEventListener","render","axis","document","getElementById","appendChild","xScale","yScale","points","toScene","origin","Vector3","add","ArrowHelper","dashed","LineDashedMaterial","dashSize","gapSize","scale","xy1","xy2","yz1","yz2","xz1","xz2","xyz1","xyz2","xyz3","lg","Geometry","vertices","computeLineDistances","line","Line","dataY","filter","dataZ","zScale","sphere","SphereGeometry","smesh","Mesh","arr","translateX","translateY","translateZ","ortho","mode","inPerspectiveMode","cc","posx","posy","posz","tarx","tary","tarz","tx","Tween","to","ty","tz","easing","Easing","Cubic","InOut","onUpdate","start","$","html","name","unit","domain","zWertebereich","click","updateProjectionMatrix","toOrthographic","v_accessor","v_accessor_cord","v_accessor_scaled","json","res","datasets","colors","category20","dataset","c","linear","d","accessor_scaled","entry","scaled","cord","./modules/domain","./modules/filter","./modules/format","./modules/id","./modules/range","./modules/sort"],"mappings":"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","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var range = require('./range')\n\n/**\n * Modul: Domain\n * -------------\n * Gibt einen überhöhten Wertbereich zurück für X und Y.\n * Überhöhte Wertebereiche werden hier benutzt, damit ein wenig Platz links und\n * oberhalb der Linie entsteht.\n */\n\n/**\n * Gibt überhöhten Wertebereich für X zurück.\n * @param  {[Array]} data             Gemergter Datensatz, ungefiltert\n * @param  {[Object]} index           Config-Objekt für die Index-Spalte\n * @param  {[Number]} overflowFactor  Überhöhungsfaktor\n * @return {[Array]}                  Das Minimum und Maximum in einem Array.\n */\nmodule.exports.overflowX = function (data, index, overflowFactor) {\n  var xWertebereich = []\n  xWertebereich[0] = range.min(data, index.accessor)\n  xWertebereich[1] = range.max(data, index.accessor)\n  xWertebereich[1] = range.applyOverflow(xWertebereich[0], xWertebereich[1],\n    overflowFactor, index.data_type)\n  return xWertebereich\n}\n/**\n * Gibt überhöhten Wertebereich für Y zurück.\n * @param  {[Array]} data             Gemergter Datensatz, ungefiltert\n * @param  {[Array]} values           Array von Config-Objekten der Wertespalten\n * @param  {[Object]} v_bundle        Accessor-Bundle\n * @param  {[Number]} overflowFactor  Überhöhungsfaktor\n * @return {[Array]}                  Das Minimum und Maximum in einem Array.\n */\nmodule.exports.overflowY = function (data, values, v_bundle, overflowFactor) {\n  var yWertebereich = []\n  yWertebereich[0] = range.minMultipleSets(data, values, v_bundle)\n  yWertebereich[1] = range.maxMultipleSets(data, values, v_bundle)\n  yWertebereich[1] = range.applyOverflow(yWertebereich[0], yWertebereich[1],\n    overflowFactor, values[0].data_type)\n  return yWertebereich\n}\n",null,"/**\n * Modul: filter\n * -------------\n * Filtert den gemergten Datensatz. Gibt die Zeilen zurück, bei denen die Spalte\n * 'row' gesetzt ist.\n */\n\n/**\n * Gibt den gefilterten Datensatz zurück.\n * @param  {[Array]} data Ungefilterter, gemergter Datensatz.\n * @param  {[String]} row Name der Spalte, nach der gefiltert werden soll\n * @return {[Array]}      Gefilterter, gemergter Datensatz.\n */\n\nmodule.exports.row = function (data, row) {\n  var ret = []\n  for (var i = 0; i < data.length; i++) {\n    if (typeof data[i][row] !== 'undefined') {\n      ret.push(data[i])\n    }\n  }\n  return ret\n}\n","var sort = require('./sort')\nvar id = require('./id')\n\n/**\n * Modul: Format\n * -------------\n * Formatiert den Datensatz\n */\n\n/**\n * Konvertiert die Zeichenketten (Strings) in dem Datensatz in Javascript-\n * Objekte, wie zum Beispiel Zahlen (Float) oder Daten (Date).\n * @param  {[Array]} data   Unformatierter Datensatz\n * @param  {{Array}} config Array von Config-Objekten\n * @return {[Array]}        Gefilterter Datensatz\n */\nmodule.exports.data_types = function (data, config) {\n  // index suchen\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < config.length; j++) {\n      if (config[j].data_type === 'Number') {\n        data[i][config[j].row] = parseFloat(data[i][config[j].row])\n      } else if (config[j].data_type === 'Date') {\n        data[i][config[j].row] =  d3.time.format(config[j].date_format)\n                                    .parse(data[i][config[j].row])\n      }\n    }\n  }\n  return data\n}\n\n/**\n * Fügt das Attribut 'rowId' für jedes Objekt hinzu. 'rowId' ist eine aus dem\n * Reihennamen und Pfad des Datensatzes generierte einzigartie ID.\n * @param  {[Array]} data   Datensatz ohne rowIds\n * @param  {{Array}} config Array von Config-Objekten\n * @return {[Array]}        Datensatz mit rowIds\n */\nmodule.exports.ids = function (data, config) {\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < config.length; j++) {\n      if (config[j].type === 'index') {\n        continue\n      }\n      data[i][id.get(config[j])] = data[i][config[j].row]\n      delete data[i][config[j].row]\n    }\n  }\n\n  return data\n}\n","/**\n * Modul: Id\n * ---------\n * Generiert einzigartige ID für eine Spalte.\n */\n\n/**\n * Gibt generierte ID zurück.\n * @param  {[Object]} config Config-Objekt\n * @return {[String]}        ID\n */\nmodule.exports.get = function (config) {\n  return config.row + '#' + config.url\n}\n\n/**\n * Gibt Config-Objekt für eine Spalte zurück\n * @param  {[String]} id    ID der Spalte\n * @param  {[Array]} values Array von Config-Objekten aller Datenspalten\n * @return {[Object]}       Config-Objekt der Spalte\n */\nmodule.exports.invert = function (id, values) {\n  for (var i = 0; i < values.length; i++) {\n    if (id === values[i].rowId) {\n      return values[i]\n    }\n  }\n}\n\n/**\n * Gibt ID für benutzerdefinierte Attribute zurück.\n * @param  {[String]} attr Benutzerdefiniertes Attribut\n * @param  {[String]} url  URL des Datensatzes\n * @return {[String]}      ID\n */\nmodule.exports.raw = function (attr, url) {\n  return attr + '#' + url\n}\n","/**\n * Modul: Range\n * ------------\n * Wertebereich von Datenspalten bestimmen\n */\n\n/**\n * Gibt das Minimum einer einzelnen Datenspalte zurück\n * @param  {[Array]} data         Der Datensatz\n * @param  {{Function}} accessor  Der Accessor für die zu untersuchende Datenreihe\n * @return {[Number]}             Das Minimum\n */\nmodule.exports.min = function (data, accessor) {\n  return d3.min(data, accessor)\n}\n\n/**\n * Gibt das Maximum einer einzelnen Datenspalte zurück\n * @param  {[Array]} data     Der Datensatz\n * @param  {{Function}} index Der Accessor für die zu untersuchende Datenreihe\n * @return {[Object]}         Das Maximum\n */\nmodule.exports.max = function (data, accessor) {\n  return d3.max(data, accessor)\n}\n\n/**\n * Gibt das Minimum für mehrere Datenspalten zurück.\n * @param  {[Array]} data           Der Datensatz\n * @param  {[Array]} values         Der Config-Array für die zu untersuchenden\n *                          \t\t\t\tDatenreihen.\n * @param  {{Function}} v_accessor  Die Funktion, die für eine bestimmte value-\n *                                  Reihe den Accessor zurückgibt.\n * @return {[Object]}               Das Minimum\n */\nmodule.exports.minMultipleSets = function (data, values, v_bundle) {\n  var min\n  for (var i = 0; i < values.length; i++) {\n    if (!values[i].activated) {\n      continue\n    }\n    var lmin = d3.min(data, v_bundle.raw(values[i]))\n    if (typeof lmin === 'undefined') {\n      continue\n    }\n    if (typeof min === 'undefined' || lmin < min) {\n      min = lmin\n    }\n  }\n  return min\n}\n\n/**\n * Gibt das Maximum für mehrere Datenspalten zurück.\n * @param  {[Array]} data           Der Datensatz\n * @param  {[Array]} values         Der Config-Array für die zu untersuchenden Datenrei-\n *                                  hen.\n * @param  {{Function}} v_accessor  Die Funktion, die für eine bestimmte value-\n *                                   Reihe den Accessor zurückgibt.\n * @return {[Object]}               Das Maximum\n */\nmodule.exports.maxMultipleSets = function (data, values, v_bundle) {\n  var max\n  for (var i = 0; i < values.length; i++) {\n    if (!values[i].activated) {\n      continue\n    }\n    var lmax = d3.max(data, v_bundle.raw(values[i]))\n\n    if (typeof max === 'undefined' || lmax > max) {\n      max = lmax\n    }\n  }\n  return max\n}\n\n//  Wertebereich der Daten bestimmen mit d3: Um einen kleinen Abstand zwischen\n//  den maximalen Punkten und dem Ende des Rändern des Diagrammes zu bewahren,\n//  wird der Unterschied (Δ) des Minimums und dem untersuchten Wert mit 1.1\n//  mulitpliziert. Anschliessend wird die Summe des Minimums und des\n//  multiplizierten Wertes an d3 zurückgegeben.\n\n/**\n * Gibt die Summe der Minimums und des mit dem Faktor factor multiplizierten\n * Unterschied von min und max zurück.\n * Wird verwendet, damit oben und rechts von Graphen Platz ausgelassen wird.\n * @param  {[Number]} min       Minimum ohne Overflow\n * @param  {[Number]} max       Maximum ohne Overflow\n * @param  {[Number]} factor    Overflow-Faktor\n * @param  {{String}} data_type Der Datentyp von min und max\n * @return {[Number]}           Das Maximum mit Overflow.\n */\nmodule.exports.applyOverflow = function (min, max, factor, data_type) {\n  if (data_type === 'Date') {\n    return new Date(min.getTime() + (max.getTime() - min.getTime()) * factor)\n  } else if (data_type === 'Number') {\n    return min + (max - min) * factor\n  }\n}\n","/**\n * Modul: Sort\n * -----------\n * Sortiert Datensatz nach der Index-Spalte\n */\n\n/**\n * Array sortieren, aufsteigend\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @return {[Array]} Sortierter Datensatz\n */\nmodule.exports = function (data, index) {\n  data.sort(function (a, b) {\n    if (index.accessor(a) < index.accessor(b)) {\n      return -1\n    }\n    if (index.accessor(a) > index.accessor(b)) {\n      return 1\n    }\n    return 0\n  })\n\n  return data\n}\n","var sort = require('./modules/sort')\nvar id = require('./modules/id')\nvar format = require('./modules/format')\nvar filter = require('./modules/filter')\nvar domain = require('./modules/domain')\nvar range = require('./modules/range')\n\n/* global d3, alert, $, THREE, TWEEN, requestAnimationFrame */\n\n/*\n *\n *\n * Initialisierung Visualisation\n *\n *\n */\n\n// Für die Visualisation benötigte Variablen\n\nvar config,           // Config-Array für _alle_ Elemente\n  datasetsMeta,       // Das 'datasets'-Attribut von meta.json\n  index,              // Config-Objekt für die Index-Spalte (X-Wert)\n  values,             // Config-Array für Werte-Spalten (Y-Werte)\n  v_accessor,         // Funktion, die den Werteaccessor zurückgibt\n  v_accessor_cord,    // Funktion, die den Koordinatenaccessor zurückgibt\n  v_accessor_scaled,  // Funktion, die den skalierten Wert zurückgibt.\n  v_bundle,           // Objekt, das die drei v-Funktionen enthält.\n\n  xScale,             // X-Skala\n  yScale,             // Y-Skala\n  zScale,             // Z-Skala\n  xWertebereich,      // Bereich der X-Werte\n  yWertebereich,      // Bereich der Y-Werte\n  zWertebereich       // Bereich der Z-Werte\n\n/**\n * Laden der Konfigurationsdatei\n * @param  {[String]} \"meta.json\"             Der Dateiname für die\n *                                            Konfigurationsdatei\n * @param  {[Function]} function(err, config) Callback\n */\nd3.json('meta.json', function (err, res) {\n  if (err) {\n    console.log(err)\n    alert(err)\n    return\n  }\n\n  config = []\n  datasetsMeta = res.datasets\n\n  index = {}\n  values = []\n\n  var colors = d3.scale.category20()\n\n  for (var i = 0; i < datasetsMeta.length; i++) {\n    var dataset = datasetsMeta[i]\n    var url = dataset.url\n\n    for (var j = 0; j < dataset.config.length; j++) {\n      var c = dataset.config[j]\n      c.url = url\n\n      // Generiere id\n      c.rowId = id.get(c)\n\n      config.push(c)\n\n      // Einfügen der Config in index oder values\n      if (c.type === 'index') {\n        index = c\n      } else if (c.type === 'value') {\n        // Spaltenspezifische Farbe generieren\n        c.color = colors(values.length + 1)\n\n        // Wenn das Attribut activated nicht gesetzt ist, setze es auch true.\n        if (typeof c.activated === 'undefined') {\n          c.activated = true\n        }\n        values.push(c)\n      }\n    }\n  // Bei unbekannten Typen: nicht in values oder index einfügen.\n  }\n\n  // Datentyp der Skalen festlegen\n  if (index.data_type === 'Number') {\n    xScale = d3.scale.linear()\n  } else if (index.data_type === 'Date') {\n    xScale = d3.time.scale()\n  }\n\n  if (values[0].data_type === 'Number') {\n    yScale = d3.scale.linear()\n  } else if (values[0].data_type === 'Date') {\n    yScale = d3.time.scale()\n  }\n\n  if (values[1].data_type === 'Number') {\n    zScale = d3.scale.linear()\n  } else if (values[1].data_type === 'Date') {\n    zScale = d3.time.scale()\n  }\n\n  // Wertebereich der Achsenskalierungen definieren. Hier ist die Anzahl der Pixel\n  // gemeint, über die sich die Achsen erstrecken. Die x-Achse und die y-Achse\n  // verschieben wir um 50 nach rechts, damit man die y-Achse beschriften kann.\n  xScale.range([0, 100])\n  yScale.range([0, 100])\n  zScale.range([0, 100])\n\n  /*\n   *\n   *\n   * Accessors für die Daten\n   *\n   *\n   */\n\n  // Index-Accessor-Funktion: Gibt für eine bestimmte Datenreihe den Wert der\n    // Index-Spalte zurück.\n\n  index.accessor = function (d) {\n    return d[index.row]\n  }\n\n  // ..._scaled: Gibt den Skalierten Wert von accessor zurück.\n  index.accessor_scaled = function (d) {\n    return xScale(d[index.row])\n  }\n\n  // Funktion, die die Werte-Accessor-Funktion zurückgibt. Da sich die Werte-\n  // Accessor-Funktionen im Gegensatz zum statischen Index-Accessor unterschei-\n  // den, müssen sie für jede Spalte neu generiert werden. Diese Funktion ist\n  // dafür zuständig.\n\n  v_accessor = function (entry) {\n    return function (d) {\n      return d[entry.rowId]\n    }\n  }\n\n  v_accessor_scaled = function (entry) {\n    return function (d) {\n      return yScale(d[entry.rowId])\n    }\n  }\n\n  // Funktion, die den Koordinatenaccessor für die in entry angegebene Spalte\n  // zurückgibt.\n  v_accessor_cord = function (index, entry) {\n    return function (d) {\n      return [index.accessor_scaled(d), v_accessor_scaled(entry)(d)]\n    }\n  }\n\n  v_bundle = {\n    'raw': v_accessor,\n    'scaled': v_accessor_scaled,\n    'cord': v_accessor_cord\n  }\n\n  // Die Daten laden\n  loadFiles()\n})\n\n/*\n *\n *\n * Laden der Daten\n *\n *\n */\n\n/**\n * Die Funktion, die den Datensatz lädt und vorbereitet.\n *\n * Vorgehen:  1. Laden der Daten\n * \t\t\t\t\t\t2. Formatieren des Datensatzes (data_types und id)\n * \t\t\t\t\t\t3. 'Mergen' mit den anderen Datensätzen, d. h. zusammenfügen\n * \t\t\t\t\t\t4. Sortieren\n * \t\t\t\t\t\t5. Die gemergten Datensätze weitergeben\n */\nfunction loadFiles () {\n  // Anzahl von Dateien, die schon heruntergeladen wurden\n  var loaded = 0\n\n  // Die Variable für die gemergten Datensätze\n  var data = []\n\n  // Jedes einzelne File herunterladen (1)\n  for (var i = 0; i < datasetsMeta.length; i++) {\n    d3.csv(datasetsMeta[i].url, mkcb(i))\n  }\n\n  /**\n   * Funktion, die die Callback-Funktion für einen bestimmten Datensatz-Meta-\n   * daten-Objekt mit Index i zurückgibt. Siehe auch: MKCB-Problem.\n   * @param  {[Number]} i   Index des Datensatz-Metadaten-Objekts aus\n   *                        datasetsMeta.\n   * @return {[Function]}   Das generierte Callback, das nach dem Laden der\n   *                        Datei ausgeführt wird.\n   */\n  function mkcb (i) {\n    return function (err, resp) {\n      if (err) {\n        alert(err)\n        console.log(err)\n        return\n      }\n\n      // Formatieren (2)\n      resp = format.data_types(resp, datasetsMeta[i].config)\n      resp = format.ids(resp, datasetsMeta[i].config)\n\n      // Merge (3)\n      for (var j = 0; j < resp.length; j++) {\n        data.push(resp[j])\n      }\n\n      if (++loaded === datasetsMeta.length) {\n        // Alle Datein sind heruntergeladen worden und gemergt.\n\n        // Sortieren (4)\n        data = sort(data, index)\n\n        // Weitergeben (5)\n        loadVisualization(data)\n      }\n    }\n  }\n}\n\n/*\n *\n *\n * Laden der Visualisation\n *\n *\n */\n\n/**\n * Lädt die Visualisation\n * @param  {[Array]} data Die gemergten Datensätze\n */\nfunction loadVisualization (data) {\n  $('#xtext').html((index.name ? index.name : index.row))\n  $('#ytext').html((values[0].name ? values[0].name : values[0].row) + ' in ' + values[0].unit)\n  $('#ztext').html((values[1].name ? values[1].name : values[1].row) + ' in ' + values[1].unit)\n\n  xWertebereich = domain.overflowX(data, index, 1.1)\n\n  yWertebereich = []\n  zWertebereich = []\n\n  yWertebereich[0] = range.min(data, v_bundle.raw(values[0]))\n  yWertebereich[1] = range.max(data, v_bundle.raw(values[0]))\n  yWertebereich[1] = range.applyOverflow(yWertebereich[0], yWertebereich[1],\n    1.1, values[0].data_type)\n\n  zWertebereich[0] = range.min(data, v_bundle.raw(values[1]))\n  zWertebereich[1] = range.max(data, v_bundle.raw(values[1]))\n  zWertebereich[1] = range.applyOverflow(zWertebereich[0], zWertebereich[1],\n    1.1, values[1].data_type)\n\n  xScale.domain(xWertebereich)\n  yScale.domain(yWertebereich)\n  zScale.domain(zWertebereich)\n\n  var camera, controls, scene, renderer, material\n  init()\n  render()\n  function animate () {\n    requestAnimationFrame(animate)\n    controls.update()\n    TWEEN.update()\n  }\n  function init () {\n    scene = new THREE.Scene()\n\n    var w = window.innerWidth * 0.8\n    var h = window.innerHeight * 0.8\n\n    // var cameraP = new THREE.PerspectiveCamera(45, w / h, 1, 10000)\n    // var cameraO = new THREE.OrthographicCamera(w / -2, w / 2, h / 2, h / -2, 1, 1000)\n    camera = new THREE.CombinedCamera(w / 2, h / 2, 70, 1, 1000, -500, 1000)\n\n    // override.\n    camera.setZoom(1)\n    camera.toPerspective()\n\n    camera.position.x = 80\n    camera.position.y = 70\n    camera.position.z = 150\n\n    material = new THREE.MeshBasicMaterial({ color: 0x000000, wireframe: false })\n\n    renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true })\n    renderer.setSize(w, h)\n\n    controls = new THREE.OrbitControls(camera, renderer.domElement)\n    controls.damping = 0.2\n    controls.addEventListener('change', render)\n\n    axis()\n\n    document.getElementById('visualization-wrap').appendChild(renderer.domElement)\n\n    animate()\n\n    xScale.range([0, 100])\n    yScale.range([0, 100])\n\n    points()\n  }\n\n  function render () {\n    renderer.render(scene, camera)\n    console.log('cords: ', camera.position.x, camera.position.y, camera.position.z)\n    console.log('in scene: ', camera.position.x + 50, camera.position.y + 50, camera.position.z + 50)\n  // console.log(camera.rotation.x*180/Math.PI, camera.rotation.y*180/Math.PI, camera.rotation.z*180/Math.PI)\n  }\n\n  function toScene (x, y, z) {\n    return [x - 50, y - 50, z - 50]\n  }\n\n  function axis () {\n    var origin = new THREE.Vector3(-50, -50, -50)\n    var length = 100\n\n    scene.add(new THREE.ArrowHelper(new THREE.Vector3(1, 0, 0), origin, length, 0xff0000))\n    scene.add(new THREE.ArrowHelper(new THREE.Vector3(0, 1, 0), origin, length, 0x00ff00))\n    scene.add(new THREE.ArrowHelper(new THREE.Vector3(0, 0, 1), origin, length, 0x0000ff))\n\n    var dashed = new THREE.LineDashedMaterial({\n      color: 0xdedede,\n      dashSize: 3,\n      gapSize: 2,\n      scale: 1\n    })\n\n    // Box zeichnen\n    var xy1 = [toScene(100, 100, 0), toScene(100, 0, 0)]\n    var xy2 = [toScene(100, 100, 0), toScene(0, 100, 0)]\n    var yz1 = [toScene(0, 100, 100), toScene(0, 100, 0)]\n    var yz2 = [toScene(0, 100, 100), toScene(0, 0, 100)]\n    var xz1 = [toScene(100, 0, 100), toScene(100, 0, 0)]\n    var xz2 = [toScene(100, 0, 100), toScene(0, 0, 100)]\n    var xyz1 = [toScene(100, 100, 100), toScene(100, 100, 0)]\n    var xyz2 = [toScene(100, 100, 100), toScene(100, 0, 100)]\n    var xyz3 = [toScene(100, 100, 100), toScene(0, 100, 100)]\n\n    for (var i = 0; i < 9; i++) {\n      var a = [xy1, xy2, xz1, xz2, yz1, yz2, xyz1, xyz2, xyz3][i]\n      var lg = new THREE.Geometry()\n      lg.vertices.push(new THREE.Vector3(a[0][0], a[0][1], a[0][2]))\n      lg.vertices.push(new THREE.Vector3(a[1][0], a[1][1], a[1][2]))\n      lg.computeLineDistances()\n      var line = new THREE.Line(lg, dashed)\n      scene.add(line)\n    }\n  }\n\n  function points () {\n    var dataY = filter.row(data, values[0].rowId)\n    var dataZ = filter.row(data, values[1].rowId)\n    for (var i = 0; i < dataY.length; i++) {\n      var x = xScale(index.accessor(dataY[i]))\n      var y = yScale(dataY[i][values[0].rowId])\n      var z = zScale(dataZ[i][values[1].rowId])\n\n      var sphere = new THREE.SphereGeometry(0.5, 8, 6)\n      var smesh = new THREE.Mesh(sphere, material)\n      var arr = toScene(x, y, z)\n      smesh.translateX(arr[0])\n      smesh.translateY(arr[1])\n      smesh.translateZ(arr[2])\n      scene.add(smesh)\n    }\n  }\n\n  $('#toPerspective').click(function () {\n    camera.toPerspective()\n    camera.setZoom(1)\n    camera.updateProjectionMatrix()\n    render()\n  })\n\n  $('#toOrtho').click(function () {\n    camera.toOrthographic()\n    camera.setZoom(5)\n    camera.updateProjectionMatrix()\n    render()\n  })\n\n  $('#xy').click(function () {\n    ortho('xy')\n  })\n\n  $('#xz').click(function () {\n    ortho('xz')\n  })\n\n  $('#zy').click(function () {\n    ortho('zy')\n  })\n\n  function ortho (mode) {\n    if (camera.inPerspectiveMode) {\n      camera.setZoom(1)\n    } else {\n      camera.setZoom(5)\n    }\n    var cc\n    if (mode === 'xy') {\n      cc = toScene(50, 50, 200)\n    } else if (mode === 'xz') {\n      cc = toScene(50, -100, 50)\n    } else if (mode === 'zy') {\n      cc = toScene(-100, 50, 50)\n    }\n\n    var posx = { x: camera.position.x }\n    var posy = { x: camera.position.y }\n    var posz = { x: camera.position.z }\n\n    var tarx = { x: cc[0] }\n    var tary = { x: cc[1] }\n    var tarz = { x: cc[2] }\n\n    var tx = new TWEEN.Tween(posx).to(tarx, 1400)\n    var ty = new TWEEN.Tween(posy).to(tary, 1400)\n    var tz = new TWEEN.Tween(posz).to(tarz, 1400)\n\n    tx.easing(TWEEN.Easing.Cubic.InOut)\n    ty.easing(TWEEN.Easing.Cubic.InOut)\n    tz.easing(TWEEN.Easing.Cubic.InOut)\n\n    tx.onUpdate(function () {\n      camera.position.x = posx.x\n    })\n    ty.onUpdate(function () {\n      camera.position.y = posy.x\n    })\n    tz.onUpdate(function () {\n      camera.position.z = posz.x\n    })\n\n    tx.start()\n    ty.start()\n    tz.start()\n  }\n}\n"],"sourceRoot":"/source/"}