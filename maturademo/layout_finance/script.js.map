{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","tests/layout_finance/modules/domain.js","script.js","tests/layout_finance/modules/filter.js","tests/layout_finance/modules/format.js","tests/layout_finance/modules/id.js","tests/layout_finance/modules/line.js","tests/layout_finance/modules/points.js","tests/layout_finance/modules/range.js","tests/layout_finance/modules/sort.js","tests/layout_finance/modules/toggle.js","tests/layout_finance/modules/tooltip.js","tests/layout_finance/script.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","range","overflowX","data","index","overflowFactor","xWertebereich","min","accessor","max","applyOverflow","data_type","overflowY","values","v_bundle","yWertebereich","minMultipleSets","maxMultipleSets","./range",2,"row","ret","push",3,"id","data_types","config","j","parseFloat","d3","time","format","date_format","parse","ids","type","get","./id","./sort",4,"url","invert","rowId","raw","attr",5,"linear","path","temp","coordinates","filter","mode","addLine","select","append","color","cord","update","line","svg","x","accessor_scaled","y","scaled","interpolate","updateAll","setActivated","activated","points_s","selectAll","classed","lineVisibility","visible","console","log","./filter",6,"updateVisibility","points",7,"lmin","lmax","factor","Date","getTime",8,"sort","b",9,"addTooltipDetail","container","text","name","removeTooltipDetail","remove","domain","add","zoom","yScale","yAxis","draw","$","on","this","hasClass","toggleClass","updateYDomain","callback","scale","translate","./domain","./line","./points",10,"nextIndex","item","pos","Δ1","Δ2","this_d","next","afterThis","beforeNext","Math","abs","opt","tooltip","indexTextAccessor","valueTextAccessor","tip","empty","indexText","valueText","unit","updateTooltip","xScale","mouse","graphTransform","xstart","x_date","d","getDate","toString","getMonth","getFullYear","round",11,"loadFiles","mkcb","err","resp","alert","datasetsMeta","loaded","loadVisualization","csv","xAxisContainer","xAxis","yAxisContainer","v","v_accessor_scaled","graph","behavior","scaleExtent","w","h","xend","ytop","ybottom","circles","enter","value","showPoints","is","showLines","toggle","v_accessor","v_accessor_cord","json","res","datasets","colors","category20","dataset","c","axis","orient","ticks","innerTickSize","outerTickSize","entry","./modules/domain","./modules/filter","./modules/format","./modules/id","./modules/line","./modules/points","./modules/sort","./modules/toggle","./modules/tooltip"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,GAAAK,GAAAX,EAAA,UAiBAU,GAAAJ,QAAAM,UAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,KAKA,OAJAA,GAAA,GAAAL,EAAAM,IAAAJ,EAAAC,EAAAI,UACAF,EAAA,GAAAL,EAAAQ,IAAAN,EAAAC,EAAAI,UACAF,EAAA,GAAAL,EAAAS,cAAAJ,EAAA,GAAAA,EAAA,GACAD,EAAAD,EAAAO,WACAL,GAUAN,EAAAJ,QAAAgB,UAAA,SAAAT,EAAAU,EAAAC,EAAAT,GACA,GAAAU,KAKA,OAJAA,GAAA,GAAAd,EAAAe,gBAAAb,EAAAU,EAAAC,GACAC,EAAA,GAAAd,EAAAgB,gBAAAd,EAAAU,EAAAC,GACAC,EAAA,GAAAd,EAAAS,cAAAK,EAAA,GAAAA,EAAA,GACAV,EAAAQ,EAAA,GAAAF,WACAI,KCIGG,UAAU,IAAIC,GAAG,SAAS7B,EAAQU,EAAOJ,GC7B5CI,EAAAJ,QAAAwB,IAAA,SAAAjB,EAAAiB,GAEA,IAAA,GADAC,MACA9B,EAAA,EAAAA,EAAAY,EAAAL,OAAAP,IACA,mBAAAY,GAAAZ,GAAA6B,IACAC,EAAAC,KAAAnB,EAAAZ,GAGA,OAAA8B,SD+CME,GAAG,SAASjC,EAAQU,EAAOJ,GEpEjC,GACA4B,IADAlC,EAAA,UACAA,EAAA,QAeAU,GAAAJ,QAAA6B,WAAA,SAAAtB,EAAAuB,GAEA,IAAA,GAAAnC,GAAA,EAAAA,EAAAY,EAAAL,OAAAP,IACA,IAAA,GAAAoC,GAAA,EAAAA,EAAAD,EAAA5B,OAAA6B,IACA,WAAAD,EAAAC,GAAAhB,UACAR,EAAAZ,GAAAmC,EAAAC,GAAAP,KAAAQ,WAAAzB,EAAAZ,GAAAmC,EAAAC,GAAAP,MACA,SAAAM,EAAAC,GAAAhB,YACAR,EAAAZ,GAAAmC,EAAAC,GAAAP,KAAAS,GAAAC,KAAAC,OAAAL,EAAAC,GAAAK,aACAC,MAAA9B,EAAAZ,GAAAmC,EAAAC,GAAAP,MAIA,OAAAjB,IAUAH,EAAAJ,QAAAsC,IAAA,SAAA/B,EAAAuB,GACA,IAAA,GAAAnC,GAAA,EAAAA,EAAAY,EAAAL,OAAAP,IACA,IAAA,GAAAoC,GAAA,EAAAA,EAAAD,EAAA5B,OAAA6B,IACA,UAAAD,EAAAC,GAAAQ,OAGAhC,EAAAZ,GAAAiC,EAAAY,IAAAV,EAAAC,KAAAxB,EAAAZ,GAAAmC,EAAAC,GAAAP,WACAjB,GAAAZ,GAAAmC,EAAAC,GAAAP,KAIA,OAAAjB,MFwEGkC,OAAO,EAAEC,SAAS,IAAIC,GAAG,SAASjD,EAAQU,EAAOJ,GG9GpDI,EAAAJ,QAAAwC,IAAA,SAAAV,GACA,MAAAA,GAAAN,IAAA,IAAAM,EAAAc,KASAxC,EAAAJ,QAAA6C,OAAA,SAAAjB,EAAAX,GACA,IAAA,GAAAtB,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACA,GAAAiC,IAAAX,EAAAtB,GAAAmD,MACA,MAAA7B,GAAAtB,IAWAS,EAAAJ,QAAA+C,IAAA,SAAAC,EAAAJ,GACA,MAAAI,GAAA,IAAAJ,QH6HMK,GAAG,SAASvD,EAAQU,EAAOJ,GItHjC,QAAAkD,GAAA3C,EAAAK,GAMA,IAAA,GALAuC,GAAA,GAGAC,EAAA,iBAEAzD,EAAA,EAAAA,EAAAY,EAAAL,OAAAP,IAAA,CACA,GAAA0D,GAAAzC,EAAAL,EAAAZ,GAAAyD,EAIAD,IAFA,IAAAxD,EAEA,IAAA0D,EAAA,GAAA,IAAAA,EAAA,GAGA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAGA1D,IAAAY,EAAAL,OAAA,IACAiD,GAAA,KAGA,MAAAA,GAhEA,GAAAG,GAAA5D,EAAA,WAcAU,GAAAJ,QAAAuD,KAAA,YASAnD,EAAAJ,QAAAwD,QAAA,SAAAjD,EAAAC,EAAAsB,EAAAZ,GACA,GAAAiC,GAAAlB,GAAAwB,OAAA,UACAC,OAAA,QACAV,KAAA,QAAA,QACAA,KAAA,QAAA,UAAAlB,EAAA6B,OACAX,KAAA,WAAAlB,EAAAgB,QAEA,WAAA1C,EAAAJ,QAAAuD,MAAA,cAAAnD,EAAAJ,QAAAuD,OACAJ,EAAAH,KAAA,IAAAE,EAAA3C,EAAAW,EAAA0C,KAAApD,EAAAsB,MA2CA1B,EAAAJ,QAAA6D,OAAA,SAAAtD,EAAAC,EAAAsB,EAAAZ,GACA,GAAA,WAAAd,EAAAJ,QAAAuD,MAAA,cAAAnD,EAAAJ,QAAAuD,KACAtB,GAAAwB,OAAA,mBAAA3B,EAAAgB,MAAA,MACAE,KAAA,IAAAE,EAAA3C,EAAAW,EAAA0C,KAAApD,EAAAsB,SACA,CACA,GAAAgC,GAAA7B,GAAA8B,IAAAD,OACAE,EAAAxD,EAAAyD,iBACAC,EAAAhD,EAAAiD,OAAArC,IACAsC,YAAAhE,EAAAJ,QAAAuD,KAEAtB,IAAAwB,OAAA,mBAAA3B,EAAAgB,MAAA,MACAE,KAAA,IAAAc,EAAAvD,MAWAH,EAAAJ,QAAAqE,UAAA,SAAA9D,EAAAC,EAAAS,EAAAC,GACA,IAAA,GAAAvB,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACAS,EAAAJ,QAAA6D,OAAAP,EAAA9B,IAAAjB,EAAAU,EAAAtB,GAAAmD,OAAAtC,EAAAS,EAAAtB,GAAAuB,IAUAd,EAAAJ,QAAAsE,aAAA,SAAAC,EAAAzC,GACA,GAAA0C,GAAAvC,GAAAwC,UAAA,yBAAA3C,EAAAgB,MAAA,MACAgB,EAAA7B,GAAAwC,UAAA,mBAAA3C,EAAAgB,MAAA,KAEAgB,GAAAY,QAAA,UAAAH,GAEAzC,EAAAyC,UAAAA,EAEAA,EAKAC,EAAAE,QAAA,UAAAH,GAHAC,EAAAE,QAAA,UAAAH,IAOAnE,EAAAJ,QAAA2E,eAAA,SAAAC,EAAA3D,GAEA,IAAA,GAAAtB,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IAAA,CACAkF,QAAAC,IAAA,0BAAA7D,EAAAtB,GAAA4E,UAAA,IAAAtD,EAAAtB,GAAAmD,MACA,IAAAgB,GAAA7B,GAAAwC,UAAA,mBAAAxD,EAAAtB,GAAAmD,MAAA,KACAgB,GAAAY,QAAA,SAAAE,GAAA3D,EAAAtB,GAAA4E,WAAA,GAEAM,QAAAC,IAAA,QJqKGC,WAAW,IAAIC,GAAG,SAAStF,EAAQU,EAAOJ,GK/R7CI,EAAAJ,QAAA4E,SAAA,EAMAxE,EAAAJ,QAAAiF,iBAAA,SAAAhE,GACA,IAAA,GAAAtB,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IAAA,CACA,GAAAuF,GAAAjD,GAAAwC,UAAA,yBAAAxD,EAAAtB,GAAAmD,MAAA,KACA1C,GAAAJ,QAAA4E,SAAA3D,EAAAtB,GAAA4E,UACAW,EAAAR,QAAA,UAAA,GAEAQ,EAAAR,QAAA,UAAA,UL+SMS,GAAG,SAASzF,EAAQU,EAAOJ,GMzTjCI,EAAAJ,QAAAW,IAAA,SAAAJ,EAAAK,GACA,MAAAqB,IAAAtB,IAAAJ,EAAAK,IASAR,EAAAJ,QAAAa,IAAA,SAAAN,EAAAK,GACA,MAAAqB,IAAApB,IAAAN,EAAAK,IAYAR,EAAAJ,QAAAoB,gBAAA,SAAAb,EAAAU,EAAAC,GAEA,IAAA,GADAP,GACAhB,EAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACA,GAAAsB,EAAAtB,GAAA4E,UAAA,CAGA,GAAAa,GAAAnD,GAAAtB,IAAAJ,EAAAW,EAAA6B,IAAA9B,EAAAtB,IACA,oBAAAyF,KAGA,mBAAAzE,IAAAA,EAAAyE,KACAzE,EAAAyE,GAGA,MAAAzE,IAYAP,EAAAJ,QAAAqB,gBAAA,SAAAd,EAAAU,EAAAC,GAEA,IAAA,GADAL,GACAlB,EAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACA,GAAAsB,EAAAtB,GAAA4E,UAAA,CAGA,GAAAc,GAAApD,GAAApB,IAAAN,EAAAW,EAAA6B,IAAA9B,EAAAtB,MAEA,mBAAAkB,IAAAwE,EAAAxE,KACAA,EAAAwE,GAGA,MAAAxE,IAmBAT,EAAAJ,QAAAc,cAAA,SAAAH,EAAAE,EAAAyE,EAAAvE,GACA,MAAA,SAAAA,EACA,GAAAwE,MAAA5E,EAAA6E,WAAA3E,EAAA2E,UAAA7E,EAAA6E,WAAAF,GACA,WAAAvE,EACAJ,GAAAE,EAAAF,GAAA2E,EADA,aN2UMG,GAAG,SAAS/F,EAAQU,EAAOJ,GO/ZjCI,EAAAJ,QAAA,SAAAO,EAAAC,GAWA,MAVAD,GAAAmF,KAAA,SAAAjG,EAAAkG,GACA,MAAAnF,GAAAI,SAAAnB,GAAAe,EAAAI,SAAA+E,GACA,GAEAnF,EAAAI,SAAAnB,GAAAe,EAAAI,SAAA+E,GACA,EAEA,IAGApF,QP8aMqF,GAAG,SAASlG,EAAQU,EAAOJ,GQ9VjC,QAAA6F,GAAArF,EAAAsB,GACA,GAAAgE,GAAA7D,GAAAwB,OAAA,oBACAC,OAAA,OACAV,KAAA,QAAA,eACAA,KAAA,QAAA,gBAAAlB,EAAA6B,OACAX,KAAA,WAAAlB,EAAAgB,MAEAgD,GAAApC,OAAA,KACAV,KAAA,QAAA,kBACA+C,KAAAjE,EAAAkE,KAAAlE,EAAAkE,KAAAlE,EAAAN,KAEAsE,EAAApC,OAAA,KACAV,KAAA,QAAA,iBACAA,KAAA,iBAAAxC,EAAAwF,KAAAxF,EAAAwF,KAAAxF,EAAAgB,KACAuE,MAAAvF,EAAAwF,KAAAxF,EAAAwF,KAAAxF,EAAAgB,KAAA,MACAkC,OAAA,QAEAoC,EAAApC,OAAA,KACAV,KAAA,QAAA,iBACAA,KAAA,iBAAAlB,EAAAkE,KAAAlE,EAAAkE,KAAAlE,EAAAN,KACAuE,KAAA,UACArC,OAAA,QAOA,QAAAuC,GAAAnE,GACAG,GAAAwB,OAAA,0BAAA3B,EAAAgB,MAAA,MACAoD,SApIA,GAAApC,GAAApE,EAAA,UACAkC,EAAAlC,EAAA,QACAwF,EAAAxF,EAAA,YACAyG,EAAAzG,EAAA,WAsBAU,GAAAJ,QAAAoG,IAAA,SAAA7F,EAAAC,EAAAS,EAAAa,EAAAZ,EAAAmF,EAAAlF,EAAAmF,EAAAC,EAAAC,GAEAvE,GAAAwB,OAAA,eACAC,OAAA,KACAV,KAAA,QAAA,mBACA0B,QAAA,YAAA5C,EAAAyC,WAEAvB,KAAA,WAAAlB,EAAAgB,OAEAiD,KAAAjE,EAAAkE,KAAAlE,EAAAkE,KAAAlE,EAAAN,KAGAM,EAAAyC,WACAsB,EAAArF,EAAAsB,GAGAgC,EAAAQ,aAAAxC,EAAAyC,UAAAzC,GACAA,EAAAyC,WACAW,EAAAD,iBAAAhE,GAKAwF,EAAA,8BAAA3E,EAAAgB,MAAA,MAAA4D,GAAA,QAAA,WACA,GAAAlF,GAAAiF,EAAAE,MAAA3D,KAAA,YACAlB,EAAAF,EAAAiB,OAAArB,EAAAP,EAEAwF,GAAAE,MAAAC,SAAA,aAEAH,EAAAE,MAAAE,YAAA,YAAA,GACA/C,EAAAQ,cAAA,EAAAxC,GACAoD,EAAAD,iBAAAhE,GACA4E,EAAArF,EAAAsB,KAGA2E,EAAAE,MAAAE,YAAA,YAAA,GACA/C,EAAAQ,cAAA,EAAAxC,GACAmE,EAAAnE,IAIA1B,EAAAJ,QAAA8G,cAAAvG,EAAAU,EAAAC,EAAAmF,EAAAlF,EAAAmF,EAAAC,EAAA,WACAC,SAiBApG,EAAAJ,QAAA8G,cAAA,SAAAvG,EAAAU,EAAAC,EAAAmF,EAAAlF,EAAAmF,EAAAC,EAAAQ,GAEAV,EAAAW,MAAA,GACAX,EAAAY,WAAA,EAAA,IAGA9F,EAAAgF,EAAAnF,UAAAT,EAAAU,EAAAC,EAAA,KACAoF,EAAAH,OAAAhF,GACAkF,EAAAnC,EAAAoC,GACAC,EAAAS,MAAAV,GACAS,OR8eGG,WAAW,EAAEzE,OAAO,EAAE0E,SAAS,EAAEC,WAAW,IAAIC,IAAI,SAAS3H,EAAQU,EAAOJ,GSpjB/E,QAAAsH,GAAA/G,EAAAC,EAAA+G,GAEA,IAAA,GADAC,GAAA,GACA7H,EAAA,EAAAA,EAAAY,EAAAL,OAAA,EAAAP,IAAA,CAEA,GAIA8H,GAAAC,EAJAC,EAAAnH,EAAAI,SAAAL,EAAAZ,IACAiI,EAAApH,EAAAI,SAAAL,EAAAZ,EAAA,IACAkI,EAAAN,GAAAI,EACAG,EAAAF,GAAAL,CAGAM,IAAAC,IAEAL,EAAAM,KAAAC,IAAAxH,EAAAI,SAAAL,EAAAZ,IAAA4H,GACAG,EAAAK,KAAAC,IAAAxH,EAAAI,SAAAL,EAAAZ,EAAA,IAAA4H,GACAC,EAAAE,EAAAD,EAAA9H,EAAAA,EAAA,GAGA,MAAA6H,GAzCA,GAAAlE,GAAA5D,EAAA,WAcAU,GAAAJ,QAAAiI,OA2CA7H,EAAAJ,QAAAkI,QAAA,SAAA3H,EAAAC,EAAAsB,EAAAZ,EAAAsG,EAAAW,EAAAC,EAAA7D,GAEA,GAAA8D,GAAApG,GAAAwB,OAAA,sBAAA3B,EAAAgB,MAAA,KACAuF,GAAA3D,QAAA,UAAAH,GAEA8D,EAAAC,UACAD,EAAApG,GAAAwB,OAAA,UAAAC,OAAA,KACAV,KAAA,KAAA,WACAA,KAAA,QAAA,WACAA,KAAA,WAAAlB,EAAAgB,OAEAuF,EAAA3E,OAAA,UACAV,KAAA,KAAA,kBAGA,IAAAuF,GACAC,CAEA,IAAA,KAAAhB,EACAa,EAAArF,KAAA,aAAA,UACAuF,EAAA,GACAC,EAAA,OACA,CACAD,EAAAJ,EAAA5H,EAAAiH,IACAgB,EAAAJ,EAAA7H,EAAAiH,KAAA1F,EAAA2G,KAAA,IAAA3G,EAAA2G,KAAA,IACAJ,EAAArF,KAAA,aAAA,UACA,IAAAY,GAAA1C,EAAA0C,KAAApD,EAAAsB,GAAAvB,EAAAiH,GACAa,GAAArF,KAAA,YAAA,aAAAY,EAAA,GAAA,IAAAA,EAAA,GAAA,KAGA3B,GAAAwB,OAAA,0BAAA3B,EAAAgB,MAAA,uCACAtC,EAAAwF,KAAAxF,EAAAwF,KAAAxF,EAAAgB,KAAA,YAEAuE,KAAAwC,GAEAtG,GAAAwB,OAAA,0BAAA3B,EAAAgB,MAAA,uCACAhB,EAAAkE,KAAAlE,EAAAkE,KAAAlE,EAAAN,KAAA,YAEAuE,KAAAyC,IAaApI,EAAAJ,QAAA0I,cAAA,SAAAnI,EAAAC,EAAAsB,EAAAZ,EAAAyH,EAAArC,GACA,GAAAtC,GAAA5D,EAAAJ,QAAA4I,MAAA,GAAAxI,EAAAJ,QAAAiI,IAAAY,eAAAC,OAEAC,EAAAJ,EAAA9F,OAAAmB,GAEAwD,EAAAF,EAAA/G,EAAAC,EAAAuI,EAGA3I,GAAAJ,QAAAkI,QAAA3H,EAAAC,EAAAsB,EAAAZ,EAAAsG,EAAA,SAAAwB,GAEA,GADAA,EAAAxI,EAAAI,SAAAoI,GACAA,YAAAzD,MAAA,CACA,GAAAjG,GAAA0J,EAAAC,UAAAC,WAAA,GAGA,OAFA5J,KAAA0J,EAAAG,WAAA,GAAAD,WAAA,IACA5J,GAAA0J,EAAAI,cAAAF,WAGA,MAAAF,GAAAE,YACA,SAAAF,GAGA,GAAA1J,IAAAyI,KAAAsB,MAAA,IAAAnI,EAAA6B,IAAAjB,GAAAkH,IAAA,KAAAE,UACA,OAAA5J,IACAwC,EAAAyC,YAYAnE,EAAAJ,QAAAqE,UAAA,SAAA9D,EAAAC,EAAAS,EAAAC,EAAAyH,EAAArC,GACA,GAAAlG,EAAAJ,QAAA4I,MAIA,IAAA,GAAAjJ,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACAS,EAAAJ,QAAA0I,cAAApF,EAAA9B,IAAAjB,EAAAU,EAAAtB,GAAAmD,OAAAtC,EAAAS,EAAAtB,GAAAuB,EAAAyH,EAAArC,MTilBGvB,WAAW,IAAIuE,IAAI,SAAS5J,EAAQU,EAAOJ,GUthB9C,QAAAuJ,KAoBA,QAAAC,GAAA7J,GACA,MAAA,UAAA8J,EAAAC,GACA,GAAAD,EAGA,MAFAE,OAAAF,OACA5E,SAAAC,IAAA2E,EAKAC,GAAAvH,EAAAN,WAAA6H,EAAAE,EAAAjK,GAAAmC,QACA4H,EAAAvH,EAAAG,IAAAoH,EAAAE,EAAAjK,GAAAmC,OAGA,KAAA,GAAAC,GAAA,EAAAA,EAAA2H,EAAAxJ,OAAA6B,IACAxB,EAAAmB,KAAAgI,EAAA3H,MAGA8H,IAAAD,EAAA1J,SAIAK,EAAAmF,EAAAnF,EAAAC,GAGAsJ,EAAAvJ,KApCA,IAAA,GANAsJ,GAAA,EAGAtJ,KAGAZ,EAAA,EAAAA,EAAAiK,EAAA1J,OAAAP,IACAsC,GAAA8H,IAAAH,EAAAjK,GAAAiD,IAAA4G,EAAA7J,IAqDA,QAAAmK,GAAAvJ,GAgCA,QAAAiG,KAEAwD,EAAA/J,KAAAgK,GACAC,EAAAjK,KAAAsG,EAGA,KAAA,GAAA5G,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACAwK,EAAA1F,UAAA,+BAAAxD,EAAAtB,GAAAmD,MAAA,MACAE,KAAA,KAAAxC,EAAAyD,iBACAjB,KAAA,KAAAoH,EAAAnJ,EAAAtB,IAIAuI,GAAA7D,UAAA9D,EAAAC,EAAAS,EAAAC,EAAAyH,EAAArC,GAEAxC,EAAAO,UAAA9D,EAAAC,EAAAS,EAAAC,GAxCAR,EAAAyF,EAAA7F,UAAAC,EAAAC,EAAA,KACAW,EAAAgF,EAAAnF,UAAAT,EAAAU,EAAAC,EAAA,KACAyH,EAAAxC,OAAAzF,GACA4F,EAAAH,OAAAhF,EASA,IAQAkJ,GARAhE,EAAApE,GAAAqI,SAAAjE,OACArC,EAAA2E,GACAzE,EAAAoC,GACAiE,aAAA,GAAA,KACA7D,GAAA,OAAAF,GAkCA2D,EAAAlI,GAAAwB,OAAA,kBACAT,KAAA,QAAAwH,GACAxH,KAAA,SAAAyH,GAGAxK,KAAAoG,EAIA8D,GAAAzG,OAAA,QACAV,KAAA,KAAA,QACAU,OAAA,QACAV,KAAA,IAAA,GACAA,KAAA,IAAA,GACAA,KAAA,QAAAwH,EAAA3B,EAAAC,OAAAD,EAAA6B,MACA1H,KAAA,SAAAyH,EAAA5B,EAAA8B,KAAA9B,EAAA+B,SACA5H,KAAA,OAAA,SAIAqH,EAAAF,EAAAzG,OAAA,KACAV,KAAA,KAAA,SACAA,KAAA,YAAA,aAAA6F,EAAAC,OACA,IAAAD,EAAA8B,KAAA,KACA3H,KAAA,OAAA,aAGA,KAAA,GAAArD,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IAAA,CAGA,GAAAkL,GAAAR,EAAA5F,UAAA,oBAAAxD,EAAAtB,GAAAmD,MAAA,MAMAvC,KAAA+C,EAAA9B,IAAAjB,EAAAU,EAAAtB,GAAAmD,QAAAgI,OAGAD,GAAAnH,OAAA,UACAV,KAAA,QAAA,cACAA,KAAA,WAAA/B,EAAAtB,GAAAmD,OACAE,KAAA,KAAAxC,EAAAyD,iBACAjB,KAAA,KAAAoH,EAAAnJ,EAAAtB,KAIAuF,EAAAD,iBAAAhE,EAQA,IAAA+I,GAAAG,EAAAzG,OAAA,KACAV,KAAA,QAAA,eACAA,KAAA,YAAA,aACA6F,EAAAC,OAAA,KACA2B,EAAA5B,EAAA+B,SAAA,KACA3K,KAAAgK,GAEAC,EAAAC,EAAAzG,OAAA,KACAV,KAAA,QAAA,eACAA,KAAA,YAAA,aAAA6F,EAAAC,OAAA,OACA7I,KAAAsG,EAYA4D,GAAAzG,OAAA,QACAV,KAAA,KAAA,WACAA,KAAA,IAAA6F,EAAAC,QACA9F,KAAA,IAAA6F,EAAA8B,MACA3H,KAAA,QAAAwH,EAAA3B,EAAAC,OAAAD,EAAA6B,MACA1H,KAAA,SAAAyH,EAAA5B,EAAA8B,KAAA9B,EAAA+B,SACAlE,GAAA,YAAA,WACAwB,EAAAU,MAAA3G,GAAA2G,MAAAjC,MACAuB,EAAA7D,UAAA9D,EAAAC,EAAAS,EAAAC,EAAAyH,EAAArC,KAIArE,GAAAwB,OAAA,oBACAT,KAAA,QAAA,SAAA6F,EAAAC,OAAA,WACAD,EAAA8B,KAAA,kBACAH,EAAA3B,EAAAC,OAAAD,EAAA6B,MAAA,mBACAD,EAAA5B,EAAA8B,KAAA9B,EAAA+B,SAAA,MASA,KAAA,GAAAjL,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACAmE,EAAAN,QAAAF,EAAA9B,IAAAjB,EAAAU,EAAAtB,GAAAmD,OAAAtC,EAAAS,EAAAtB,GAAAuB,EAKAuF,GAAA,UAAAC,GAAA,SAAA,WACA5C,EAAAP,KAAAoD,KAAAoE,MACAjH,EAAAO,UAAA9D,EAAAC,EAAAS,EAAAC,KAKAuF,EAAA,oBAAAC,GAAA,SAAA,WAEAsE,EADAvE,EAAAE,MAAAsE,GAAA,aACA,GAEA,EAEA/F,EAAAN,QAAAoG,EACA9F,EAAAD,iBAAAhE,KAGAwF,EAAA,mBAAAC,GAAA,SAAA,WAEAwE,EADAzE,EAAAE,MAAAsE,GAAA,aACA,GAEA,EAEAnH,EAAAa,eAAAuG,EAAAjK,IAUA,KAAA,GAAAtB,GAAA,EAAAA,EAAAsB,EAAAf,OAAAP,IACAwL,EAAA/E,IAAA7F,EAAAC,EAAAS,EAAAA,EAAAtB,GAAAuB,EAAAmF,EAAAlF,EAAAmF,EAAAC,EAAAC,GApdA,GAsBA1E,GACA8H,EACApJ,EACAS,EACAmK,EACAC,EACAjB,EACAlJ,EAEAyH,EACArC,EACA5F,EACAS,EACA8I,EACA1D,EAEAiE,EACAC,EACA5B,EAEAmC,EACAE,EA3CAhD,EAAAxI,EAAA,qBACAoE,EAAApE,EAAA,kBACAgG,EAAAhG,EAAA,kBACAwF,EAAAxF,EAAA,oBACAkC,EAAAlC,EAAA,gBACAyC,EAAAzC,EAAA,oBACA4D,EAAA5D,EAAA,oBACAyG,EAAAzG,EAAA,oBACAyL,EAAAzL,EAAA,mBAqCAsL,IAAA,EAQA/I,GAAAqJ,KAAA,YAAA,SAAA7B,EAAA8B,GACA,GAAA9B,EAGA,MAFA5E,SAAAC,IAAA2E,OACAE,OAAAF,EAIA3H,MACA8H,EAAA2B,EAAAC,SAEAhL,KACAS,IAIA,KAAA,GAFAwK,GAAAxJ,GAAA+E,MAAA0E,aAEA/L,EAAA,EAAAA,EAAAiK,EAAA1J,OAAAP,IAIA,IAAA,GAHAgM,GAAA/B,EAAAjK,GACAiD,EAAA+I,EAAA/I,IAEAb,EAAA,EAAAA,EAAA4J,EAAA7J,OAAA5B,OAAA6B,IAAA,CACA,GAAA6J,GAAAD,EAAA7J,OAAAC,EACA6J,GAAAhJ,IAAAA,EAGAgJ,EAAA9I,MAAAlB,EAAAY,IAAAoJ,GAEA9J,EAAAJ,KAAAkK,GAGA,UAAAA,EAAArJ,KACA/B,EAAAoL,EACA,UAAAA,EAAArJ,OAEAqJ,EAAAjI,MAAA8H,EAAAxK,EAAAf,OAAA,GAGA,mBAAA0L,GAAArH,YACAqH,EAAArH,WAAA,GAEAtD,EAAAS,KAAAkK,IAOA,WAAApL,EAAAO,UACA4H,EAAA1G,GAAA+E,MAAA9D,SACA,SAAA1C,EAAAO,YACA4H,EAAA1G,GAAAC,KAAA8E,SAGA,WAAA/F,EAAA,GAAAF,UACAuF,EAAArE,GAAA+E,MAAA9D,SACA,SAAAjC,EAAA,GAAAF,YACAuF,EAAArE,GAAAC,KAAA8E,SAKAwD,EAAA,KACAC,EAAA,IAEA5B,GAAAC,OAAA,GAAA6B,KAAA,EAAAD,KAAA,EAAAE,QAAA,IAGA1C,EAAAD,IAAAY,eAAAA,EAKAF,EAAAtI,OAAA,EAAAmK,EAAA3B,EAAAC,OAAAD,EAAA6B,OACApE,EAAAjG,OAAAoK,EAAA5B,EAAA8B,KAAA9B,EAAA+B,QAAA,IAGAX,EAAAhI,GAAA8B,IAAA8H,OAAA7E,MAAA2B,GAAAmD,OAAA,UACAC,MAAA,GACAxF,EAAAtE,GAAA8B,IAAA8H,OAAA7E,MAAAV,GAAAwF,OAAA,QACAC,MAAA,GACAC,eAAAxB,EAAA3B,EAAAC,OAAAD,EAAA6B,MACAuB,cAAA,GAaAzL,EAAAI,SAAA,SAAAoI,GACA,MAAAA,GAAAxI,EAAAgB,MAIAhB,EAAAyD,gBAAA,SAAA+E,GACA,MAAAL,GAAAK,EAAAxI,EAAAgB,OAQA4J,EAAA,SAAAc,GACA,MAAA,UAAAlD,GACA,MAAAA,GAAAkD,EAAApJ,SAIAsH,EAAA,SAAA8B,GACA,MAAA,UAAAlD,GACA,MAAA1C,GAAA0C,EAAAkD,EAAApJ,UAMAuI,EAAA,SAAA7K,EAAA0L,GACA,MAAA,UAAAlD,GACA,OAAAxI,EAAAyD,gBAAA+E,GAAAoB,EAAA8B,GAAAlD,MAIA9H,GACA6B,IAAAqI,EACAjH,OAAAiG,EACAxG,KAAAyH,GAIA9B,QVmgCG4C,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,mBAAmB,EAAEC,oBAAoB,UAAU","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var range = require('./range')\n\n/**\n * Modul: Domain\n * -------------\n * Gibt einen überhöhten Wertbereich zurück für X und Y.\n * Überhöhte Wertebereiche werden hier benutzt, damit ein wenig Platz links und\n * oberhalb der Linie entsteht.\n */\n\n/**\n * Gibt überhöhten Wertebereich für X zurück.\n * @param  {[Array]} data             Gemergter Datensatz, ungefiltert\n * @param  {[Object]} index           Config-Objekt für die Index-Spalte\n * @param  {[Number]} overflowFactor  Überhöhungsfaktor\n * @return {[Array]}                  Das Minimum und Maximum in einem Array.\n */\nmodule.exports.overflowX = function (data, index, overflowFactor) {\n  var xWertebereich = []\n  xWertebereich[0] = range.min(data, index.accessor)\n  xWertebereich[1] = range.max(data, index.accessor)\n  xWertebereich[1] = range.applyOverflow(xWertebereich[0], xWertebereich[1],\n    overflowFactor, index.data_type)\n  return xWertebereich\n}\n/**\n * Gibt überhöhten Wertebereich für Y zurück.\n * @param  {[Array]} data             Gemergter Datensatz, ungefiltert\n * @param  {[Array]} values           Array von Config-Objekten der Wertespalten\n * @param  {[Object]} v_bundle        Accessor-Bundle\n * @param  {[Number]} overflowFactor  Überhöhungsfaktor\n * @return {[Array]}                  Das Minimum und Maximum in einem Array.\n */\nmodule.exports.overflowY = function (data, values, v_bundle, overflowFactor) {\n  var yWertebereich = []\n  yWertebereich[0] = range.minMultipleSets(data, values, v_bundle)\n  yWertebereich[1] = range.maxMultipleSets(data, values, v_bundle)\n  yWertebereich[1] = range.applyOverflow(yWertebereich[0], yWertebereich[1],\n    overflowFactor, values[0].data_type)\n  return yWertebereich\n}\n",null,"/**\n * Modul: filter\n * -------------\n * Filtert den gemergten Datensatz. Gibt die Zeilen zurück, bei denen die Spalte\n * 'row' gesetzt ist.\n */\n\n/**\n * Gibt den gefilterten Datensatz zurück.\n * @param  {[Array]} data Ungefilterter, gemergter Datensatz.\n * @param  {[String]} row Name der Spalte, nach der gefiltert werden soll\n * @return {[Array]}      Gefilterter, gemergter Datensatz.\n */\n\nmodule.exports.row = function (data, row) {\n  var ret = []\n  for (var i = 0; i < data.length; i++) {\n    if (typeof data[i][row] !== 'undefined') {\n      ret.push(data[i])\n    }\n  }\n  return ret\n}\n","var sort = require('./sort')\nvar id = require('./id')\n\n/**\n * Modul: Format\n * -------------\n * Formatiert den Datensatz\n */\n\n/**\n * Konvertiert die Zeichenketten (Strings) in dem Datensatz in Javascript-\n * Objekte, wie zum Beispiel Zahlen (Float) oder Daten (Date).\n * @param  {[Array]} data   Unformatierter Datensatz\n * @param  {{Array}} config Array von Config-Objekten\n * @return {[Array]}        Gefilterter Datensatz\n */\nmodule.exports.data_types = function (data, config) {\n  // index suchen\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < config.length; j++) {\n      if (config[j].data_type === 'Number') {\n        data[i][config[j].row] = parseFloat(data[i][config[j].row])\n      } else if (config[j].data_type === 'Date') {\n        data[i][config[j].row] =  d3.time.format(config[j].date_format)\n                                    .parse(data[i][config[j].row])\n      }\n    }\n  }\n  return data\n}\n\n/**\n * Fügt das Attribut 'rowId' für jedes Objekt hinzu. 'rowId' ist eine aus dem\n * Reihennamen und Pfad des Datensatzes generierte einzigartie ID.\n * @param  {[Array]} data   Datensatz ohne rowIds\n * @param  {{Array}} config Array von Config-Objekten\n * @return {[Array]}        Datensatz mit rowIds\n */\nmodule.exports.ids = function (data, config) {\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < config.length; j++) {\n      if (config[j].type === 'index') {\n        continue\n      }\n      data[i][id.get(config[j])] = data[i][config[j].row]\n      delete data[i][config[j].row]\n    }\n  }\n\n  return data\n}\n","/**\n * Modul: Id\n * ---------\n * Generiert einzigartige ID für eine Spalte.\n */\n\n/**\n * Gibt generierte ID zurück.\n * @param  {[Object]} config Config-Objekt\n * @return {[String]}        ID\n */\nmodule.exports.get = function (config) {\n  return config.row + '#' + config.url\n}\n\n/**\n * Gibt Config-Objekt für eine Spalte zurück\n * @param  {[String]} id    ID der Spalte\n * @param  {[Array]} values Array von Config-Objekten aller Datenspalten\n * @return {[Object]}       Config-Objekt der Spalte\n */\nmodule.exports.invert = function (id, values) {\n  for (var i = 0; i < values.length; i++) {\n    if (id === values[i].rowId) {\n      return values[i]\n    }\n  }\n}\n\n/**\n * Gibt ID für benutzerdefinierte Attribute zurück.\n * @param  {[String]} attr Benutzerdefiniertes Attribut\n * @param  {[String]} url  URL des Datensatzes\n * @return {[String]}      ID\n */\nmodule.exports.raw = function (attr, url) {\n  return attr + '#' + url\n}\n","var filter = require('./filter')\n\n/**\n * Modul: Line\n * -----------\n * Helfer-Funktionen für die Generierung von Linien\n */\n\n/**\n * Modus für die Interpolation der Linie:\n * \t- \"undefined\" oder \"linear\": Lineare Interpolation\n * \t- Restliche: Modi, die von d3 unterstützt werden.\n * @type {String}\n */\nmodule.exports.mode = 'undefined'\n\n/**\n * Fügt eine Linie für die angegebnen Datenspalte hinzu.\n * @param  {[Array]} data       Datensatz\n * @param  {[Object]} index     Index-Config-Objekt\n * @param  {[Array]} config     Array von Config-Objekten der Datenspalten\n * @param  {[Object]} v_bundle  Accessors\n */\nmodule.exports.addLine = function (data, index, config, v_bundle) {\n  var path = d3.select('#graph')\n   .append('path')\n   .attr('class', 'line')\n   .attr('style', 'stroke:' + config.color)\n   .attr('data-row', config.rowId)\n\n  if (module.exports.mode === 'linear' || module.exports.mode === 'undefined') {\n    path.attr('d', linear(data, v_bundle.cord(index, config)))\n  }\n}\n\n/**\n * Gibt die Lineare Interpolation als SVG-Path-String zurück\n * @param  {[Array]} data        Das Datenarray\n * @param  {{Function}} accessor Die Funktion, welche die Koordinaten zurück-\n *                               gibt des entsprechenden Punktes\n * @return {[String]}            String, das in das Attribut 'd' im path-\n *                               Element eingesetzt werden muss.\n */\nfunction linear (data, accessor) {\n  var path = ''\n\n  // figure out\n  var temp = 'Weighted Price'\n\n  for (var i = 0; i < data.length; i++) {\n    var coordinates = accessor(data[i], temp)\n\n    if (i !== 0) {\n      // L-Befehl für eine Linie\n      path += 'L' + coordinates[0] + ',' + coordinates[1]\n    } else {\n      // Erster Punkt: M-Befehl für Anfangspunkt.\n      path += 'M' + coordinates[0] + ',' + coordinates[1]\n    }\n\n    if (i !== data.length - 1) {\n      path += ' '\n    }\n  }\n  return path\n}\n\n/**\n * Aktualisiert eine Linie.\n * @param  {[Array]} data       Datensatz (gefiltert)\n * @param  {[Object]} index     Index-Config-Objekt\n * @param  {[Object]} config    Config-Objekt der Spalte\n * @param  {[Object]} v_bundle  Accessor-Funktionen\n */\nmodule.exports.update = function (data, index, config, v_bundle) {\n  if (module.exports.mode === 'linear' || module.exports.mode === 'undefined') {\n    d3.select('.line[data-row=\"' + config.rowId + '\"]')\n      .attr('d', linear(data, v_bundle.cord(index, config)))\n  } else {\n    var line = d3.svg.line()\n      .x(index.accessor_scaled)\n      .y(v_bundle.scaled(config))\n      .interpolate(module.exports.mode)\n\n    d3.select('.line[data-row=\"' + config.rowId + '\"]')\n      .attr('d', line(data))\n  }\n}\n\n/**\n * Ruft die Funktion update für alle Config-Objekte in values auf.\n * @param  {[Array]} data       Datensatz (ungefiltert)\n * @param  {[Object]} index     Index-Config-Objekt\n * @param  {[Array]} values     Config-Array der Datenspalten\n * @param  {[Object]} v_bundle  Accessor-Funktionen\n */\nmodule.exports.updateAll = function (data, index, values, v_bundle) {\n  for (var i = 0; i < values.length; i++) {\n    module.exports.update(filter.row(data, values[i].rowId), index, values[i], v_bundle)\n  }\n}\n\n/**\n * Ein- oder Ausblenden einer Linie.\n * @param  {[Boolean]} activated  true: Linie aktivieren;\n *                                false: Linie ausblenden\n * @param  {[Object]} config      Config-Objekt der Datenspalte\n */\nmodule.exports.setActivated = function (activated, config) {\n  var points_s = d3.selectAll(\".data-point[data-row='\" + config.rowId + \"']\")\n  var line = d3.selectAll(\".line[data-row='\" + config.rowId + \"']\")\n\n  line.classed('hidden', !activated)\n\n  config.activated = activated\n\n  if (!activated) {\n    // Nicht aktiviert: Override\n    points_s.classed('hidden', !activated)\n  } else {\n    // Aktiviert: Zeigen, danach das Modul points entscheiden lassen.\n    points_s.classed('hidden', !activated)\n  }\n}\n\nmodule.exports.lineVisibility = function (visible, values) {\n  // Verstecke alle Linien, falls visible. Sonst wende config.activated an.\n  for (var i = 0; i < values.length; i++) {\n    console.log('line with visibility = ', values[i].activated, '@', values[i].rowId)\n    var line = d3.selectAll('.line[data-row=\"' + values[i].rowId + '\"]')\n    line.classed('hidden', visible ? !values[i].activated : true)\n  }\n  console.log('.')\n}\n","/**\n * Modul: Points\n * -------------\n * Aus- und Einblenden von Punkten\n */\n\n/**\n * Sichtbarkeit der Punkte\n * @type {Boolean}\n */\nmodule.exports.visible = false\n\n/**\n * Sichtbarkeit der Punkte aktualisieren\n * @param  {[Array]} values Array von Config-Objekten der Werte-Spalten\n */\nmodule.exports.updateVisibility = function (values) {\n  for (var i = 0; i < values.length; i++) {\n    var points = d3.selectAll('.data-point[data-row=\"' + values[i].rowId + '\"]')\n    if (module.exports.visible && values[i].activated) {\n      points.classed('hidden', false)\n    } else {\n      points.classed('hidden', true)\n    }\n  }\n}\n","/**\n * Modul: Range\n * ------------\n * Wertebereich von Datenspalten bestimmen\n */\n\n/**\n * Gibt das Minimum einer einzelnen Datenspalte zurück\n * @param  {[Array]} data         Der Datensatz\n * @param  {{Function}} accessor  Der Accessor für die zu untersuchende Datenreihe\n * @return {[Number]}             Das Minimum\n */\nmodule.exports.min = function (data, accessor) {\n  return d3.min(data, accessor)\n}\n\n/**\n * Gibt das Maximum einer einzelnen Datenspalte zurück\n * @param  {[Array]} data     Der Datensatz\n * @param  {{Function}} index Der Accessor für die zu untersuchende Datenreihe\n * @return {[Object]}         Das Maximum\n */\nmodule.exports.max = function (data, accessor) {\n  return d3.max(data, accessor)\n}\n\n/**\n * Gibt das Minimum für mehrere Datenspalten zurück.\n * @param  {[Array]} data           Der Datensatz\n * @param  {[Array]} values         Der Config-Array für die zu untersuchenden\n *                          \t\t\t\tDatenreihen.\n * @param  {{Function}} v_accessor  Die Funktion, die für eine bestimmte value-\n *                                  Reihe den Accessor zurückgibt.\n * @return {[Object]}               Das Minimum\n */\nmodule.exports.minMultipleSets = function (data, values, v_bundle) {\n  var min\n  for (var i = 0; i < values.length; i++) {\n    if (!values[i].activated) {\n      continue\n    }\n    var lmin = d3.min(data, v_bundle.raw(values[i]))\n    if (typeof lmin === 'undefined') {\n      continue\n    }\n    if (typeof min === 'undefined' || lmin < min) {\n      min = lmin\n    }\n  }\n  return min\n}\n\n/**\n * Gibt das Maximum für mehrere Datenspalten zurück.\n * @param  {[Array]} data           Der Datensatz\n * @param  {[Array]} values         Der Config-Array für die zu untersuchenden Datenrei-\n *                                  hen.\n * @param  {{Function}} v_accessor  Die Funktion, die für eine bestimmte value-\n *                                   Reihe den Accessor zurückgibt.\n * @return {[Object]}               Das Maximum\n */\nmodule.exports.maxMultipleSets = function (data, values, v_bundle) {\n  var max\n  for (var i = 0; i < values.length; i++) {\n    if (!values[i].activated) {\n      continue\n    }\n    var lmax = d3.max(data, v_bundle.raw(values[i]))\n\n    if (typeof max === 'undefined' || lmax > max) {\n      max = lmax\n    }\n  }\n  return max\n}\n\n//  Wertebereich der Daten bestimmen mit d3: Um einen kleinen Abstand zwischen\n//  den maximalen Punkten und dem Ende des Rändern des Diagrammes zu bewahren,\n//  wird der Unterschied (Δ) des Minimums und dem untersuchten Wert mit 1.1\n//  mulitpliziert. Anschliessend wird die Summe des Minimums und des\n//  multiplizierten Wertes an d3 zurückgegeben.\n\n/**\n * Gibt die Summe der Minimums und des mit dem Faktor factor multiplizierten\n * Unterschied von min und max zurück.\n * Wird verwendet, damit oben und rechts von Graphen Platz ausgelassen wird.\n * @param  {[Number]} min       Minimum ohne Overflow\n * @param  {[Number]} max       Maximum ohne Overflow\n * @param  {[Number]} factor    Overflow-Faktor\n * @param  {{String}} data_type Der Datentyp von min und max\n * @return {[Number]}           Das Maximum mit Overflow.\n */\nmodule.exports.applyOverflow = function (min, max, factor, data_type) {\n  if (data_type === 'Date') {\n    return new Date(min.getTime() + (max.getTime() - min.getTime()) * factor)\n  } else if (data_type === 'Number') {\n    return min + (max - min) * factor\n  }\n}\n","/**\n * Modul: Sort\n * -----------\n * Sortiert Datensatz nach der Index-Spalte\n */\n\n/**\n * Array sortieren, aufsteigend\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @return {[Array]} Sortierter Datensatz\n */\nmodule.exports = function (data, index) {\n  data.sort(function (a, b) {\n    if (index.accessor(a) < index.accessor(b)) {\n      return -1\n    }\n    if (index.accessor(a) > index.accessor(b)) {\n      return 1\n    }\n    return 0\n  })\n\n  return data\n}\n","var line = require('./line')\nvar id = require('./id')\nvar points = require('./points')\nvar domain = require('./domain')\n\n/**\n * Modul: Toggle\n * -------------\n * Steuerung der Sichtbarkeit von einzelnen Datenspalten\n */\n\n/**\n * Toggle-Button hinzufügen\n * @param  {[Array]} data           Datensatz\n * @param  {[Object]} index         Index-Config-Objekt\n * @param  {[Array]} values         Config-Objekte der Wertespalten\n * @param  {[Object]} config        Config-Objekt der zu untersuchenden Spalte\n * @param  {[Object]} v_bundle      Accessors\n * @param  {[Object]} zoom          D3-Zoomobjekt\n * @param  {[Object]} yWertebereich D3-Wertebereich\n * @param  {[Object]} yScale        D3-Skalierung\n * @param  {[Object]} yAxis         D3-Achse\n * @param  {[Function]} draw        Funktion, die aufgerufen wird, wenn der\n *                                  Graph neu gezeichnet werden soll.\n */\nmodule.exports.add = function (data, index, values, config, v_bundle, zoom, yWertebereich, yScale, yAxis, draw) {\n  // Der Container für die Toggles hat die id select-row\n  d3.select('#select-row')\n   .append('p')\n   .attr('class', 'select-row-item')\n   .classed('inactive', !config.activated)\n   // Spaltenspezifische Farbe hinzufügen\n   .attr('data-row', config.rowId)\n   // Falls der Name der Spalte in meta.json gesetzt ist, füge ihn ein.\n   .text(config.name ? config.name : config.row)\n\n  // Detail hinzufügen\n  if (config.activated){\n    addTooltipDetail(index, config)\n  }\n\n  line.setActivated(config.activated, config)\n  if (config.activated) {\n    points.updateVisibility(values)\n  }\n\n  // Wenn die Toggle-Fläche angeklickt wird, aktualisiere die Sichtbarkeit\n  // der Linie.\n  $('.select-row-item[data-row=\"' + config.rowId + '\"]').on('click', function () {\n    var row = $(this).attr('data-row')\n    var config = id.invert(row, values)\n\n    if ($(this).hasClass('inactive')) {\n      // Linie wird aktiviert.\n      $(this).toggleClass('inactive', false)\n      line.setActivated(true, config)\n      points.updateVisibility(values)\n      addTooltipDetail(index, config)\n    } else {\n      // Linie wird deaktiviert.\n      $(this).toggleClass('inactive', true)\n      line.setActivated(false, config)\n      removeTooltipDetail(config)\n    }\n\n    // und aktualisiere die Y-Achse und Skalierung.\n    module.exports.updateYDomain(data, values, v_bundle, zoom, yWertebereich, yScale, yAxis, function () {\n      draw()\n    })\n  })\n}\n\n/**\n * Funktion, um den Wertebereich und Skalierung bei einem Toggle zu\n * aktualisieren\n * @param  {[Array]} data           Datensatz\n * @param  {[Array]} values         Config-Objekte der Wertespalten\n * @param  {[Object]} v_bundle      Accessors\n * @param  {[Object]} zoom          D3-Zoomobjekt\n * @param  {[Object]} yWertebereich D3-Wertebereich\n * @param  {[Object]} yScale        D3-Skalierung\n * @param  {[Object]} yAxis         D3-Achse\n * @param  {Function} callback      Funktion, die am Schluss aufgerufen wird.\n */\nmodule.exports.updateYDomain = function (data, values, v_bundle, zoom, yWertebereich, yScale, yAxis, callback) {\n  // Zoom zurücksetzen\n  zoom.scale(1)\n  zoom.translate([0, 0])\n\n  // Y-Wertebereich und Y-Skalierung aktualisieren.\n  yWertebereich = domain.overflowY(data, values, v_bundle, 1.1)\n  yScale.domain(yWertebereich)\n  zoom.y(yScale)\n  yAxis.scale(yScale)\n  callback()\n}\n\n/**\n * Tooltip-Werteanzeige hinzufügen\n * @param {[Object]} index  Index-Config-Objekt\n * @param {[Object]} config Config-Objekt der Spalte\n */\nfunction addTooltipDetail(index, config) {\n  var container = d3.select('#display-overlay')\n    .append('div')\n    .attr('class', 'tip-element')\n    .attr('style', 'border-color:' + config.color)\n    .attr('data-row', config.rowId)\n\n  container.append('p')\n    .attr('class', 'tip-title caps')\n    .text(config.name ? config.name : config.row)\n\n  container.append('p')\n    .attr('class', 'tip-attribute')\n    .attr('data-attribute', index.name ? index.name : index.row)\n    .text((index.name ? index.name : index.row) + ': ')\n    .append('span')\n\n  container.append('p')\n    .attr('class', 'tip-attribute')\n    .attr('data-attribute', config.name ? config.name : config.row)\n    .text('Wert: ')\n    .append('span')\n}\n\n/**\n * Tooltip-Werteanzeige entfernen\n * @param  {[Object]} config Config-Objekt der Spalte\n */\nfunction removeTooltipDetail (config) {\n  d3.select('.tip-element[data-row=\"' + config.rowId + '\"]')\n    .remove()\n}\n","var filter = require('./filter')\n\n/**\n * Modul: Tooltip\n * --------------\n * Funktionen für den Tooltip\n */\n\n/**\n * Einstellungen für dieses Modul.\n * \t- opt.graphTransform: Die Verschiebung des Graphen, wie in script.js\n * \t\tdefiniert.\n * @type {Object}\n */\nmodule.exports.opt = {}\n\n/**\n * Findet den zu einem gegebenen Wert den nächsten in einem Array vorhandenem Wert.\n * @param  {[Array]} data         Datenset\n * @param  {[Function]} accessor  Funktion, das den zu vergleichenden Wert\n *                                zurückgibt, wenn das Objekt gegeben wird.\n * @param  {[type]} item          Der zu vergleichende Wert\n * @return {[Number]}             Der Index (0 < @return < data.length-1)\n */\nfunction nextIndex (data, index, item) {\n  var pos = -1\n  for (var i = 0; i < data.length - 1; i++) {\n    // Liegt der Punkt zwischen zwei gegebenen Punkten?\n    var this_d = index.accessor(data[i])\n    var next = index.accessor(data[i + 1])\n    var afterThis = item >= this_d\n    var beforeNext = item <= next\n    var Δ1, Δ2\n\n    if (afterThis && beforeNext) {\n      // Falls ja, setze 'index' auf den index des näheren Punktes.\n      Δ1 = Math.abs(index.accessor(data[i]) - item)\n      Δ2 = Math.abs(index.accessor(data[i + 1]) - item)\n      pos = Δ1 < Δ2 ? i : i + 1\n    }\n  }\n  return pos\n}\n\n/**\n * Funktion für den Tooltip-Kreis und die Werteanzeige\n * @param  {[Array]} data           Datenarray\n * @param  {{String}} rowId       Name der Reihe\n * @param  {[Function]} accessor    Funktion, die das Koordinatenpaar den Punktes\n *                                \tzurückgibt.\n * @param  {[Number]} index         Index des Datenarray, die den zu \"tooltippenden\"\n *                                \tWert entspricht.\n * @param {{d3 View}} parent        d3-View, in das das Tooltip eingesetzt werden\n *                    \t\t\t\t\t\t\tsollte.\n * @param {{Function}} textAccessor Funktion, die den Text für das Tooltip zu-\n *                                  rückgibt.\n */\nmodule.exports.tooltip = function (data, index, config, v_bundle, pos, indexTextAccessor, valueTextAccessor, activated) {\n  // tooltip-Variablen\n  var tip = d3.select('#tooltip[data-row=\"' + config.rowId + '\"]')\n  tip.classed('hidden', !activated)\n\n  if (tip.empty()) {\n    tip = d3.select('#graph').append('g')\n      .attr('id', 'tooltip')\n      .attr('class', 'tooltip')\n      .attr('data-row', config.rowId)\n\n    tip.append('circle')\n      .attr('id', 'tooltip-circle')\n  }\n\n  var indexText\n  var valueText\n\n  if (pos === -1) {\n    tip.attr('visibility', 'hidden')\n    indexText = ''\n    valueText = ''\n  } else {\n    indexText = indexTextAccessor(data[pos])\n    valueText = valueTextAccessor(data[pos]) + (config.unit ? ' ' + config.unit : '')\n    tip.attr('visibility', 'visible')\n    var cord = v_bundle.cord(index, config)(data[pos])\n    tip.attr('transform', 'translate(' + cord[0] + ',' + cord[1] + ')')\n  }\n\n  d3.select('.tip-element[data-row=\"' + config.rowId + '\"]' +\n    '> .tip-attribute[data-attribute=\"' + (index.name ? index.name : index.row) + '\"]' +\n    '> span')\n    .text(indexText)\n\n  d3.select('.tip-element[data-row=\"' + config.rowId + '\"]' +\n    '> .tip-attribute[data-attribute=\"' + (config.name ? config.name : config.row) + '\"]' +\n    '> span')\n    .text(valueText)\n}\n\n/**\n * Funktion, um den Ort des Tooltips neu zu berechnen (zum Beispiel wenn sich\n * die Maus bewegt oder gezoomt wird).\n * @param  {[Array]} data       Datensatz (Gefiltert)\n * @param  {[Object]} index     Config-Objekt für den Index\n * @param  {[Object]} config    Die Config für das Value-Objekt\n * @param  {[Object]} v_bundle  Accessor-Bundle\n * @param  {[Object]} xScale    X-Skalierung (d3)\n * @param  {[Object]} yScale    Y-Skalierung (d3)\n */\nmodule.exports.updateTooltip = function (data, index, config, v_bundle, xScale, yScale) {\n  var x = module.exports.mouse[0] - module.exports.opt.graphTransform.xstart\n\n  var x_date = xScale.invert(x)\n\n  var pos = nextIndex(data, index, x_date)\n\n  //  tooltip\n  module.exports.tooltip(data, index, config, v_bundle, pos, function (d) {\n    d = index.accessor(d)\n    if (d instanceof Date) {\n      var s = d.getDate().toString() + '/'\n      s += (d.getMonth() + 1).toString() + '/'\n      s += d.getFullYear().toString()\n      return s\n    }\n    return d.toString()\n  }, function (d) {\n    // Zahl runden\n    // http://stackoverflow.com/questions/11832914/round-to-at-most-2-decimal-places-in-javascript\n    var s = (Math.round(v_bundle.raw(config)(d) * 1000) / 1000).toString()\n    return s\n  }, config.activated)\n}\n\n/**\n * - Ruft die Funktion 'updateTooltip' für alle Values auf.\n * @param  {[Array]} data       Datensatz (ungefiltert)\n * @param  {[Object]} index     Config-Objekt für den Index\n * @param  {[Array]} values     Die Config für die Values\n * @param  {[Object]} v_bundle  Accessor-Bundle\n * @param  {[Object]} xScale    X-Skalierung (d3)\n * @param  {[Object]} yScale    Y-Skalierung (d3)\n */\nmodule.exports.updateAll = function (data, index, values, v_bundle, xScale, yScale) {\n  if (!module.exports.mouse) {\n    return\n  }\n  // updateTooltip aufrufen, Datensatz filtern.\n  for (var i = 0; i < values.length; i++) {\n    module.exports.updateTooltip(filter.row(data, values[i].rowId), index, values[i], v_bundle, xScale, yScale)\n  }\n}\n","var tooltip = require('./modules/tooltip')\nvar line = require('./modules/line')\nvar sort = require('./modules/sort')\nvar points = require('./modules/points')\nvar id = require('./modules/id')\nvar format = require('./modules/format')\nvar filter = require('./modules/filter')\nvar domain = require('./modules/domain')\nvar toggle = require('./modules/toggle')\n\n/* global d3, alert, $ */\n\n/**\n *\n *\n * Initialisierung Visualisation\n *\n *\n */\n\n// Für die Visualisation benötigte Variablen\n\nvar config,           // Config-Array für _alle_ Elemente\n  datasetsMeta,       // Das 'datasets'-Attribut von meta.json\n  index,              // Config-Objekt für die Index-Spalte (X-Wert)\n  values,             // Config-Array für Werte-Spalten (Y-Werte)\n  v_accessor,         // Funktion, die den Werteaccessor zurückgibt\n  v_accessor_cord,    // Funktion, die den Koordinatenaccessor zurückgibt\n  v_accessor_scaled,  // Funktion, die den skalierten Wert zurückgibt.\n  v_bundle,           // Objekt, das die drei v-Funktionen enthält.\n\n  xScale,             // X-Skala\n  yScale,             // Y-Skala\n  xWertebereich,      // Bereich der X-Werte\n  yWertebereich,      // Bereich der Y-Werte\n  xAxis,              // X-Achse\n  yAxis,              // Y-Achse\n\n  w,                  // Breite der Visualisation\n  h,                  // Höhe der Visualisation\n  graphTransform,     // Verschiebung des Graphenbereichs\n\n  showPoints,         // Gibt an, ob Punkte angezeigt werden sollen\n  showLines           // Gibt an, ob die Linien angezeigt werden sollen\n\nshowPoints = false\n\n/**\n * Laden der Konfigurationsdatei\n * @param  {[String]} \"meta.json\"             Der Dateiname für die\n *                                            Konfigurationsdatei\n * @param  {[Function]} function(err, config) Callback\n */\nd3.json('meta.json', function (err, res) {\n  if (err) {\n    console.log(err)\n    alert(err)\n    return\n  }\n\n  config = []\n  datasetsMeta = res.datasets\n\n  index = {}\n  values = []\n\n  var colors = d3.scale.category20()\n\n  for (var i = 0; i < datasetsMeta.length; i++) {\n    var dataset = datasetsMeta[i]\n    var url = dataset.url\n\n    for (var j = 0; j < dataset.config.length; j++) {\n      var c = dataset.config[j]\n      c.url = url\n\n      // Generiere id\n      c.rowId = id.get(c)\n\n      config.push(c)\n\n      // Einfügen der Config in index oder values\n      if (c.type === 'index') {\n        index = c\n      } else if (c.type === 'value') {\n        // Spaltenspezifische Farbe generieren\n        c.color = colors(values.length + 1)\n\n        // Wenn das Attribut activated nicht gesetzt ist, setze es auch true.\n        if (typeof c.activated === 'undefined') {\n          c.activated = true\n        }\n        values.push(c)\n      }\n    }\n  // Bei unbekannten Typen: nicht in values oder index einfügen.\n  }\n\n  // Datentyp der Skalen festlegen\n  if (index.data_type === 'Number') {\n    xScale = d3.scale.linear()\n  } else if (index.data_type === 'Date') {\n    xScale = d3.time.scale()\n  }\n\n  if (values[0].data_type === 'Number') {\n    yScale = d3.scale.linear()\n  } else if (values[0].data_type === 'Date') {\n    yScale = d3.time.scale()\n  }\n\n  // Höhe und Breite des gesamten SVG-Elements definieren; Verschiebung des\n  // Graphs\n  w = 1100\n  h = 550\n\n  graphTransform = {xstart: 70, ytop: 0, xend: 0, ybottom: 50}\n\n  // Das Tooltip über die Transformation benachrichtigen\n  tooltip.opt.graphTransform = graphTransform\n\n  // Wertebereich der Achsenskalierungen definieren. Hier ist die Anzahl der Pixel\n  // gemeint, über die sich die Achsen erstrecken. Die x-Achse und die y-Achse\n  // verschieben wir um 50 nach rechts, damit man die y-Achse beschriften kann.\n  xScale.range([0, w - graphTransform.xstart - graphTransform.xend])\n  yScale.range([h - graphTransform.ytop - graphTransform.ybottom, 0])\n\n  // Die Achsen werden von d3 generiert.\n  xAxis = d3.svg.axis().scale(xScale).orient('bottom')\n    .ticks(5)\n  yAxis = d3.svg.axis().scale(yScale).orient('left')\n    .ticks(5)\n    .innerTickSize(-w + graphTransform.xstart + graphTransform.xend)\n    .outerTickSize(2)\n\n  /**\n   *\n   *\n   * Accessors für die Daten\n   *\n   *\n   */\n\n  // Index-Accessor-Funktion: Gibt für eine bestimmte Datenreihe den Wert der\n    // Index-Spalte zurück.\n\n  index.accessor = function (d) {\n    return d[index.row]\n  }\n\n  // ..._scaled: Gibt den Skalierten Wert von accessor zurück.\n  index.accessor_scaled = function (d) {\n    return xScale(d[index.row])\n  }\n\n  // Funktion, die die Werte-Accessor-Funktion zurückgibt. Da sich die Werte-\n  // Accessor-Funktionen im Gegensatz zum statischen Index-Accessor unterschei-\n  // den, müssen sie für jede Spalte neu generiert werden. Diese Funktion ist\n  // dafür zuständig.\n\n  v_accessor = function (entry) {\n    return function (d) {\n      return d[entry.rowId]\n    }\n  }\n\n  v_accessor_scaled = function (entry) {\n    return function (d) {\n      return yScale(d[entry.rowId])\n    }\n  }\n\n  // Funktion, die den Koordinatenaccessor für die in entry angegebene Spalte\n  // zurückgibt.\n  v_accessor_cord = function (index, entry) {\n    return function (d) {\n      return [index.accessor_scaled(d), v_accessor_scaled(entry)(d)]\n    }\n  }\n\n  v_bundle = {\n    'raw': v_accessor,\n    'scaled': v_accessor_scaled,\n    'cord': v_accessor_cord\n  }\n\n  // Die Daten laden\n  loadFiles()\n})\n\n/**\n *\n *\n * Laden der Daten\n *\n *\n */\n\n/**\n * Die Funktion, die den Datensatz lädt und vorbereitet.\n *\n * Vorgehen:  1. Laden der Daten\n * \t\t\t\t\t\t2. Formatieren des Datensatzes (data_types und id)\n * \t\t\t\t\t\t3. 'Mergen' mit den anderen Datensätzen, d. h. zusammenfügen\n * \t\t\t\t\t\t4. Sortieren\n * \t\t\t\t\t\t5. Die gemergten Datensätze weitergeben\n */\nfunction loadFiles () {\n  // Anzahl von Dateien, die schon heruntergeladen wurden\n  var loaded = 0\n\n  // Die Variable für die gemergten Datensätze\n  var data = []\n\n  // Jedes einzelne File herunterladen (1)\n  for (var i = 0; i < datasetsMeta.length; i++) {\n    d3.csv(datasetsMeta[i].url, mkcb(i))\n  }\n\n  /**\n   * Funktion, die die Callback-Funktion für einen bestimmten Datensatz-Meta-\n   * daten-Objekt mit Index i zurückgibt. Siehe auch: MKCB-Problem.\n   * @param  {[Number]} i   Index des Datensatz-Metadaten-Objekts aus\n   *                        datasetsMeta.\n   * @return {[Function]}   Das generierte Callback, das nach dem Laden der\n   *                        Datei ausgeführt wird.\n   */\n  function mkcb (i) {\n    return function (err, resp) {\n      if (err) {\n        alert(err)\n        console.log(err)\n        return\n      }\n\n      // Formatieren (2)\n      resp = format.data_types(resp, datasetsMeta[i].config)\n      resp = format.ids(resp, datasetsMeta[i].config)\n\n      // Merge (3)\n      for (var j = 0; j < resp.length; j++) {\n        data.push(resp[j])\n      }\n\n      if (++loaded === datasetsMeta.length) {\n        // Alle Datein sind heruntergeladen worden und gemergt.\n\n        // Sortieren (4)\n        data = sort(data, index)\n\n        // Weitergeben (5)\n        loadVisualization(data)\n      }\n    }\n  }\n}\n\n/*\n *\n *\n * Laden der Visualisation\n *\n *\n */\n\n/**\n * Lädt die Visualisation\n * @param  {[Array]} data Die gemergten Datensätze\n */\nfunction loadVisualization (data) {\n  /**\n   *\n   *  Achsen initalisieren (d3)\n   *\n   */\n\n  xWertebereich = domain.overflowX(data, index, 1.1)\n  yWertebereich = domain.overflowY(data, values, v_bundle, 1.1)\n  xScale.domain(xWertebereich)\n  yScale.domain(yWertebereich)\n\n  /**\n   *\n   * Zoom (d3)\n   *\n   */\n\n  // Zoom hinzufügen\n  var zoom = d3.behavior.zoom()\n    .x(xScale)\n    .y(yScale)\n    .scaleExtent([0.9, 50])\n    .on('zoom', draw)\n\n  // Die variable graph initialiseren, damit sie in der Funktion zoomed() ver-\n  // wendet werden kann, obwohl sie erst später definiert wird.\n  var graph\n\n  /**\n   * Wird aufgerufen, sobald der Graph neu gezeichnet werden sollte.\n   */\n  function draw () {\n    // Achsen neu zeichnen\n    xAxisContainer.call(xAxis)\n    yAxisContainer.call(yAxis)\n\n    // Punkte neu berechnen.\n    for (var i = 0; i < values.length; i++) {\n      v.selectAll(\"circle.data-point[data-row='\" + values[i].rowId + \"']\")\n        .attr('cx', index.accessor_scaled)\n        .attr('cy', v_accessor_scaled(values[i]))\n    }\n\n    // Tooltip und Linie aktualisieren\n    tooltip.updateAll(data, index, values, v_bundle, xScale, yScale)\n\n    line.updateAll(data, index, values, v_bundle)\n  }\n\n  /**\n   *\n   * Elemente einfügen\n   *\n   */\n\n  // SVG-Element mit id 'visualization' extrahieren aus html\n  var v = d3.select('#visualization')\n    .attr('width', w)\n    .attr('height', h)\n\n    // Unterstützung für Zoom hinzufügen\n    .call(zoom)\n\n  // SVG-Maske für den Graph: Wir wollen nicht, dass Punkte aus unserem\n  // definierten Feld auftauchen. Siehe Masken-Problem.\n  v.append('mask')\n    .attr('id', 'mask')\n    .append('rect')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', w - graphTransform.xstart - graphTransform.xend)\n    .attr('height', h - graphTransform.ytop - graphTransform.ybottom)\n    .attr('fill', 'white')\n\n  // Container für die Visualisation hinzufügen und zu der Maske linken\n  // Transformation nach den definierten Angaben mit transform, translate\n  graph = v.append('g')\n    .attr('id', 'graph')\n    .attr('transform', 'translate(' + graphTransform.xstart +\n      ',' + graphTransform.ytop + ')')\n    .attr('mask', 'url(#mask)')\n\n  // Die Punkte zeichnen für jede Datenspalte\n  for (var i = 0; i < values.length; i++) {\n    // Die Punkte einer Spalte haben für das Attribut data-row die generierte id\n    // (siehe Identifikations-Problem)\n    var circles = graph.selectAll(\"circle[data-row='\" + values[i].rowId + \"']\")\n\n      // Aus dem gesamten gemergten Datensatz die Elemente extrahieren, die die\n      // entsprechende Reihe besitzen. Siehe Merge-Problem.\n      // Daten an Selektion binden: Alle Aktionen, die an diesem einem Element\n      // ausgeführt werden, werden auch auf alle anderen Datenreihen ausgeführt.\n      .data(filter.row(data, values[i].rowId)).enter()\n\n    // Aktionen an Datengebundener Selektion ausführen\n    circles.append('circle')\n      .attr('class', 'data-point')\n      .attr('data-row', values[i].rowId)\n      .attr('cx', index.accessor_scaled)\n      .attr('cy', v_accessor_scaled(values[i]))\n  }\n\n  // Sichtbarkeit der Punkte akualisieren\n  points.updateVisibility(values)\n\n  /**\n   *\n   * d3-Achsen einfügen\n   *\n   */\n\n  var xAxisContainer = v.append('g')\n    .attr('class', 'axis axis-x')\n    .attr('transform', 'translate(' +\n      graphTransform.xstart + ',' +\n      (h - graphTransform.ybottom) + ')')\n    .call(xAxis)\n\n  var yAxisContainer = v.append('g')\n    .attr('class', 'axis axis-y')\n    .attr('transform', 'translate(' + graphTransform.xstart + ',0)')\n    .call(yAxis)\n\n  /**\n   *\n   * Tooltip (nicht von d3, selber implementiert)\n   *\n   */\n\n  // Maus-Koordinaten: Um auf die Maus-Koordinaten zugreifen zu können, muss man\n  // ein unsichtbares Element über den gesamten Graph legen, der alle\n  // 'Maus-Events' 'aufnimmt'. Ein leerer g-SVG-Container (wie 'graph') ist\n  // nicht fähig, Maus-Events aufzunehmen. Siehe Event-Problem.\n  v.append('rect')\n    .attr('id', 'overlay')\n    .attr('x', graphTransform.xstart)\n    .attr('y', graphTransform.ytop)\n    .attr('width', w - graphTransform.xstart - graphTransform.xend)\n    .attr('height', h - graphTransform.ytop - graphTransform.ybottom)\n    .on('mousemove', function () {\n      tooltip.mouse = d3.mouse(this)\n      tooltip.updateAll(data, index, values, v_bundle, xScale, yScale)\n    })\n\n  // Overlay für die Detailanzeige für Tooltip\n  d3.select('#display-overlay')\n    .attr('style', 'left: ' + graphTransform.xstart + 'px;' +\n      'top: ' + graphTransform.ytop + 'px;' +\n      'max-width: ' + (w - graphTransform.xstart - graphTransform.xend) + 'px;' +\n      'max-height: ' + (h - graphTransform.ytop - graphTransform.ybottom) + 'px;')\n\n  /**\n   *\n   * Linien\n   *\n   */\n\n  // Für jede Datenspalte die Linie einfügen\n  for (var i = 0; i < values.length; i++) {\n    line.addLine(filter.row(data, values[i].rowId), index, values[i], v_bundle)\n  }\n\n  // Falls der Interpolationsmodus wechselt: Neuen Modus setzen und Linien\n  // aktualisieren.\n  $('select').on('change', function () {\n    line.mode = this.value\n    line.updateAll(data, index, values, v_bundle)\n  })\n\n  // Falls die Checkbox für die Sichtbarkeit der Punkte angeklickt wird:\n  // Sichtbarkeit akutalisieren.\n  $('#checkbox-points').on('change', function () {\n    if ($(this).is(':checked')) {\n      showPoints = true\n    } else {\n      showPoints = false\n    }\n    points.visible = showPoints\n    points.updateVisibility(values)\n  })\n\n  $('#checkbox-lines').on('change', function () {\n    if ($(this).is(':checked')) {\n      showLines = true\n    } else {\n      showLines = false\n    }\n    line.lineVisibility(showLines, values)\n  })\n\n  /**\n   *\n   * Toggles: Ein- und ausblenden von Datenreihen.\n   *\n   */\n\n  // Die Toggle-Elemente für jede Spalte generieren.\n  for (var i = 0; i < values.length; i++) {\n    toggle.add(data, index, values, values[i], v_bundle, zoom, yWertebereich, yScale, yAxis, draw)\n  }\n}\n"],"sourceRoot":"/source/"}